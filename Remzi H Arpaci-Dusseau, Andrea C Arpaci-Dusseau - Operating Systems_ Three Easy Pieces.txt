4. The Abstraction: The Process
section 4.5, starting from Oct 2008, struct context in xv6 is:
    struct context {
        uint edi;
        uint esi;
        uint ebx;
        uint ebp;
        uint eip;
    };
ecx and edx are caller saved, esp the stack pointer is encoded in the address of the context, none
of them has to be saved explicitly

Questions
4.1
100%, no process issues IO, unless the kernel intentionally blocks execution for no reason the cpu
will always be assigned to a ready process 

4.2
// length of the IO operation determined by -L includes the tick in which the IO operation is
// issued, an IO operation of length 5 issued at tick 1 is finished at the start of tick 6, the
// entirety of tick 6 may be scheduled to some other process, but the IO operation is still only
// considered as complete at tick 6, not tick 5
10 cycles: 
    PID 0 is run to completion (4 cycles), context switch to PID 1
    PID 1 issues IO (1 cycle) 
    PID 1 blocks on IO (4 + 1 cycles, + 1 since the process is considered complete at tick 10)

4.3
6 cycles:
    PID 0 issues IO (1 cycle), blocks on IO, context switch
    PID 1 is run to complete (4 cycles)
    PID 0 blocks on IO (1 + 1 cycle)
The scheduler is not preemptive, a process will not be descheduled unless it invoked a syscall 

4.4
9 cycles:
    PID 0 issues IO (1 cycles)
    PID 0 blocks on IO (4 cycles), context switch at start of tick 5
    PID 1 runs to completion (4 cycles)

4.5
same to 4.3

4.6
27 cycles:
    PID 0 issues IO (1 cycle), context switch to PID 1
    PID 1 runs to completion (5 cycles), context switch to PID 2
    PID 2 runs to completion (5 cycles), context switch to PID 3
    PID 3 runs to completion (5 cycles), context switch to PID 0
    PID 0 issues IO (1 cycle)
    PID 0 blocks on IO (4 cycles)
    PID 0 issues IO (1 cycle)
    PID 0 blocks on IO (4 + 1 cycles)

4.7
18 cycles:
    PID 0 issues IO (1 cycle), context switch to PID 1
    PID 1 runs to completion (5 cycles), context switch to PID 0
    PID 0 issues IO (1 cycle), context switch to PID 2
    PID 2 runs to completion (5 cycles), context switch to PID 0
    PID 0 issues IO (1 cycle), context switch to PID 3
    PID 3 runs to completion (5 cycles)
A process issued an IO operation is likely to issue more in near future (e.g. keyboard press in a
document processing software, mouse click in a GUI), immediately switch back to the process after IO
completion increases utilization of the IO device and CPU as well as responsiveness to user input.
In modern preemptive OS an IO heavy process may be assigned higher priority, compared to computation
bounded processes it will be scheduled more frequently but with smaller time quantum each time. 

4.8
in general, -I IO_RUN_IMMEDIATE should be roughly more efficient than -I IO_RUN_LATER, -S
SWITCH_ON_IO should be strictly more efficient than -S SWITCH_ON_END

Remaining questions: 
- after control being yielded to user process, how could a process be preempted without invoking
  syscalls by itself? (A: with interruption tied to a physical timer)

5.Interlude: Process API
wait() will return prematurely when:
    - the argument (*stat_loc) is not a proper pointer or NULL
    - the child process is stopped (not terminated) by a signal, in which case it can be restarted
      later

meaning of suffixes of exec:
    - l: variadic functions accepting arbitrary number of arguments as arguments to the program
    - p: search program in PATH environment variable
    - v: arguments
    - e: environment variables
    
Questions 
5.1
./ostep/chapter_5/q1.c
Fork() copies the entire state of the parent process to the child process, x as an auto variable on
the stack or in register is copied to the child process with the initial value 100. After that x in
child and parent processes are two different entities hence modification to them does not interfere
with each other.

5.2
./ostep/chapter_5/q2.c
the file descriptor is available to both parent and child processes, write from the parent process
always seems to happen before write from the child process, maybe fork() returns earlier to the
parent process compared to the child?

5.3
./ostep/chapter_5/q3.c
the parent process can sleep for a long enough duration, the two processes may communicate with some
form of shared memory, pipe, lock or signal, above all wait() still is the most natural way to
express this pattern.

5.4
./ostep/chapter_5/q4.c
All variants of exec are built upon a single syscall `execve`. At the beginning the C programming
language was an implementation detail of UNIX system, in the 80s C gained popularity among various
vendors despite having no standard and kept evolving that way even after ANSI C. UNIX before Linux
is a branket term for a dozen competing imcompatible operating systems. The current state of exec
variants may be an effort to maintain backward compatbility with all of them.

5.5
./ostep/chapter_5/q5.c
On success wait() returns process id of the terminted child. When the process calling wait() has no
child process ECHILD is assigned to the global variable errno.

5.6
./ostep/chapter_5/q6.c
Parent process block on the termination of a selected child process instead of any one of them.
Behavior of the function may be modified by the additional options argument, e.g. return immediately
when there's no terminated child process. 

5.7
./ostep/chapter_5/q7.c
printf() sliently succeeds without actually printing anything to stdout.

5.8
./ostep/chapter_5/q8.c

6. Mechanism: Limited Direct Execution
Measurement (in WSL)
syscall:
    ./ostep/chapter_6/measure_syscall.c
    getpid(), 48 nanoseconds
context switch:
    ./ostep_chapter_6/measure_switch.c
    20 microseconds (without sched_setaffinity)
    1 microsecond (with sched_setaffinity)

7. Scheduling: Introduction
Proofs of the optimality of SJF and STCF can be found in problem 16-2 of introduction to algorithms

Questions
7.1
SJF:
    avg. turnaround: (200 + 400 + 600)/3 = 400
    avg. response: (0 + 200 + 400)/3 = 200
FIFO:
    same to SJF

7.2
SJF:
    avg. turnaround: (100 + 300 + 600)/3 = 333.33
    avg. response: (0 + 100 + 300)/3 = 133.33
FIFO:
    same to SJF

7.3
RR, same length:
    avg. turnaround: (598 + 599 + 600)/3 = 599
    avg. response: (0 + 1 + 2)/3 = 1
RR, different lengths:
    avg. turnaround: (298 + 499 + 600)/3 = 465.67
    avg. response: (0 + 1 + 2)/3 = 1

7.4
jobs ordered by ascending length, in other cases FIFO is not optimal

7.5
all except the longest job must be shorter than the quantum length:
    if there's two jobs with lengths longer than quantum length, no matter what is scheduled first
    the other will has a longer response time than in RR

7.6
response time in SJF is linear in job lengths
p./scheduler.py -p SJF -j 3 -l 3,2,1 -c
    Average -- Response: 1.33  Turnaround 3.33  Wait 1.33
p./scheduler.py -p SJF -j 3 -l 30,20,10 -c
    Average -- Response: 13.33  Turnaround 33.33  Wait 13.33
p./scheduler.py -p SJF -j 3 -l 300,200,100 -c
    Average -- Response: 133.33  Turnaround 333.33  Wait 133.33

7.7
response time with RR is linear in quantum length
let quantum length be T_q, worst response time is:
    (N - 1)T_q
    
8. Scheduling: The Multi-Level Feedback Queue
Questions
8.1
./mlfq.py -j 2 -n 2 -c -m 50 -M 0

8.2
Example 1: A Single Long-Running Job
    ./mlfq.py -n 3 -q 10 -l 0,200,0 -c
Example 2: Along Came A Short Job
    ./mlfq.py -n 3 -q 10 -l 0,200,0:100,20,0 -c
// io frequency is defined as "number of CPU ticks between two IO requests" in the simulator 
Example 3: What About I/O?
    ./mlfq.py -S -n 3 -q 10 -l 0,200,0:100,20,1.1 -c
Attempt #2: The Priority Boost
    without boost:
    ./mlfq.py -n 3 -q 10 -S -I -i 1 -l 0,200,0:100,50,1:100,50,1 -c
    with boost:
    ./mlfq.py -n 3 -q 10 -S -B 100 -I -i 1 -l 0,200,0:100,50,1:100,50,1 -c
Attempt #3: Better Accounting
    without allotment accounting:
    ./mlfq.py -q 10 -S -i 1 -l 0,200,0:100,100,9 -c
    with allotment accounting:
    ./mlfq.py -q 10 -i 1 -l 0,200,0:100,100,9 -c
Tuning MLFQ And Other Issues
    ./mlfq.py -Q 10,20,40 -l 0,140,0:0,140,0 -c

8.3
one queue, no allotment accounting, no IO reset
./mlfq.py -n 1 -j 10 -c -m 20

8.4
./mlfq.py -q 100 -S -i 1 -l 0,10000,99:0,10000,0 -c

8.5
200ms, assume after each boost the job will be run at least once (i.e. the system is not croweded
with high priority jobs)

8.6
lower response time in sacrifice of IO throughput. In CFQ (the default Linux IO scheduler between
2.6 - 5.0) the scheduler will introduce an artifical delay after an IO request in hope to catch more
IO requests from the same process to be performed in batch. Such a mechanism is majorly meaningless
with an SSD. CFQ was then removed from Linux in 5.0.

