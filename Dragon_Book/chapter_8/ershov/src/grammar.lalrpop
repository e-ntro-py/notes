use crate::{Node, BinOp, UnOp, Var};

#[LALR] grammar;

pub E: Node = {
    <e:E> "+" <t:T> => Node::bin(e, BinOp::Add, t),
    <e:E> "-" <t:T> => Node::bin(e, BinOp::Sub, t),
    <T>,
}

T: Node = {
    <t:T> "*" <f:F> => Node::bin(t, BinOp::Mul, f),
    <t:T> "/" <f:F> => Node::bin(t, BinOp::Div, f),
    <F>,
}

F: Node = {
    "-" <f:F> => Node::un(UnOp::Neg, f),
    "*" <f:F> => Node::un(UnOp::Deref, f),
    "(" <E> ")",
    <A>,
    <v:Id> => Node::var(v),
}

Id: Var = {
    <s:r"[a-z]"> => s.chars().next().unwrap(),
}

//  parse array access as pointer arithmetic
//  assume 1-byte width word
A: Node = {
    <a:Id> "[" <i:Id> "]" => {
        let arr = Node::var(a);
        let idx = Node::var(i);
        let add = Node::bin(arr, BinOp::Add, idx);
        Node::un(UnOp::Deref, add)
    }
}