Chapter 3
3.1
a permutation {0,1}^64 -> {0,1}^64 is a table of 64-bit strings of 2^64 entries
one such permutation takes 64 * 2^64 bits to describe (at least)
by using 80-bit keys, there are 2^80 such permutations in the idealized block cipher
2^80 * 64 * 2^64 = 2^150 bits in total

3.2
16 rounds
56-bit key
64-bit block
encrypt the same plaintext 3 times with (k1, k2, k1) or three independent keys

3.3
128, 192, 256
10, 12, 14
128-bit block

3.4
on legacy system
when it's feasible

3.5
for all 2^56 keys:
a single processor takes 2^56 * 2^-26 = 2^30 seconds to do the exhaustive searching, or 34 years
assume the order is independent to the actual key, it 17 years in average
by using 2^14 processors, it takes 2^30 / 2^14 = 2^16 seconds, or about 18 hours to do the exhaustive search
in average the key will be found in 9 hours

3.6
in DES2, either half of the plaintext is affected by only one round function
given plaintext (L0, R0) and ciphertext (L2, R2)
by definition of DES, L1 = R0 and R1 = L2, all (Li, Ri) for i = 0 .. 2 are known
R1 = L0 xor F(k1, R0), R2 = L1 xor F(k2, R1), both the input and output of Fk1, Fk2 are known
therefore k1 and k2 can be exhaustively searched seperately, takes 2^48 * 2 = 2^49 encryptions
also in DES2, changing one half of the plaintext will only affect one half of the ciphertext
which only happens in an idealized cipher with probability 1/2^32

3.7
see problem 5.7 to Introduction of Modern Cryptography

3.8
80 70 60 50 40 30 20 10 08 07 06 05 04 03 02 01

3.9
80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01

3.10
./Cryptography_Engineering/complementation/

chapter 4
4.1
it's not reversible
assume the block size is 128 bits, then 0 <= n < 128, the encoding of n is a single byte
then the following padded text does not correspond to a unique plaintext:
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
it can be sixteen 00 bytes or fifteen 00 bytes followed by a 01

4.2
fixed IV:   the same to ECB, doesn't have indistinguishable encryption
counter IV: not that different to fixed IV, the resulting scheme is not CPA-secure
random IV:  relies on a cryptographically secure random number generator, which may be inefficient
            otherwise this scheme can be proven CPA-secure given an idealized block cipher
nonce IV:   performance depends on the implementation of the nonce
            if it provides no randomness then the resulting scheme can not possibly be CPA-secure

4.3
K = C xor P = F(k, nonce||i)
C' = K' xor P'
K' = F(k, nonce||i')
if the block cipher is perfect, an adversary cannot possibly know K' given K
so even with knowledge of K, C, C' and P, the only thing an adversary can be sure is P xor P' != C xor C'

4.4
Another secret!
And another.   

4.5
routine

4.6
C1' = F(k, C0' xor P1')
C2 = F(k, C1 xor P2)
given C1' = C2, C0' xor P1' = C1 xor P2, P1' = C1 xor P2 xor C0'
given C1, P2 and C0', P1' can be computed

Chapter 5
5.1
thanks https://www.decrane.io/md5
0000000023f95a1cc84f18591bef74a9027ab6bfff4753bec329a9ddb11e6294d12c2405075eb4421be258722583b2521297d824ca8cae13e1e93477
000000005401426fb4b54a77d215905a7a42cfdd9f765b3790dd7e3d0afd77d7d14c55de49ff3ef2f552b88672c0497e80acd11fc738b496a8d373f0
4b5cd8f200000000
and
0000000023f95a1cc84f18591bef74a9027ab63fff4753bec329a9ddb11e6294d12c2405075eb4421be258722503b3521297d824ca8cae13e1e934f7
000000005401426fb4b54a77d215905a7a42cfdd9f765bb790dd7e3d0afd77d7d14c55de49ff3ef2f552b88672c0497e802cd11fc738b496a8d373f0
4b5cd87200000000

5.2
./Cryptography_Engineering/hash
85027f3fa308b4f070b566ca4da26daffa65d861e6a26430d69a5ab7670a56f9a1668b802e6dfd4ddc992b93f752f29d76ce32777a3234f6a47db5aa
4dc57185

5.3
./Cryptography_Engineering/hash
the complexity of birthday attack is Θ(2^(n/2))
adding one more byte to the hash makes the attack 2^(8/2) = 16 times harder
finding a collision in SHA-512-32 takes roughly 5 seconds
thereby finding a collision in SHA-512-256 may take 5 * 16^(32 - 5) ≒ 10^25 years
finding a collision in SHA-512 itself may take 10^25 * 16^32 ≒ 10^63 years

5.4
./Cryptography_Engineering/hash
finding a preimage by random sampling has complexity Θ(2^n)
it takes roughly 2 seconds to find a preimage in SHA-512-16
thereby it may take 2^(256 - 16) * 2 ≒ 10^65 years to find a preimage in SHA-512-256
10^65 * 2^256 = 10^142 years to find a preimage in SHA-512 itself

5.5
H2 = AES(k, H1 xor m2)
H1 = AES(k, H0 xor m1)
m1' = m2 xor H1
H1' = AES(k, H0 xor m1') = AES(k, H0 xor m2 xor H1) = AES(k, H1 xor m2) = H2
H2' = AES(k, H1' xor m2') = AES(k, H2 xor H2 xor m2 xor H1) = AES(k, H1 xor m2) = H2

5.6
-

Chapter 6
6.1
given two messages p1 and p2, where p2 = a||p2', a is the first block of p2
an adversary can request M(p1) and M(p2) then compute a block b that:
    b = a xor IV xor M(p1)
    M(p1||b||p2') = M(p2)
for a authentication system for mails, the date of a letter is almost always located at the end of the text
an adversary can get tags for the content of a letter and an arbitrary date (prepended with a random block)
then forge a tag for a letter with wrong date and some noise in between

6.2
M(a||c) = E(k, c xor M(a)) = E(k, c xor M(b)) = M(b||c)
by correctness of decryption, c xor M(a) = c xor M(b), M(a) = M(b)
then for any block d,
M(a||d) = E(k, d xor M(a)) = E(k, d xor M(b)) = M(b||d)

6.3
M(b||M(b) xor M(a) xor b) = E(k, M(b) xor M(a) xor b xor M(b)) = E(k, M(a) xor b) = M(a||b)

6.4
M(a) = E(k, a xor IV)
let b = M(a) xor a xor IV, then
M(a||b) = E(k, b xor M(a)) = E(k, M(a) xor a xor IV xor M(a)) = E(k, a xor IV) = M(a)

6.5
./Cryptography_Engineering/cbc_mac

6.6
routine

6.7
routine

Chapter 7
7.1
first the message number is used as a nonce in the authentication scheme
if the message number ever repeats the underlying authentication will break
the message number is also used as the nonce in CTR mode
if the same message number is used twice, it's obvious to any adversary
the adversary can then easily compute the difference between two messages using the same key stream

7.2
./Cryptography_Engineering/secure-channel

7.3
-

7.4
given a CPA-secure encryption scheme and a secure authentication scheme
encryption-then-authentication will guarentee a CCA-secure encryption scheme
the security of authentication-then-encryption is only determined after a case-by-case analysis
encryption-and-authentication is almost never secure
authentication schemes is not required to, thereby often does not have indistinguishable encryption

7.5
-

7.6
by eavesdropping the traffics of the secure channel in this scheme, an adversary will learn:
    the size of every message (up to number of blocks due to padding)
    when and how often these messages are issued and received
    the total number of messages issued under the current key (message number is not encrypted)
    the messages is not obfuscated, it will be clear to any eavesdropper that the two parites are communicating secretly
say an Orwellian authority is in operation
then frequent and lengthy communication through an encrypted channel is itself a strong indication of thoughtcrime
the actual message been exchanged doesn't really matter

Chapter 8
-

Chapter 9
9.1
Haskell:    https://hackage.haskell.org/package/random-1.1/docs/System-Random.html
            samples and sets a 32-bit(!) global seed from the current cpu time when run in IO monad
            calculate future seeds from the global one otherwise (manually from StdGen, in ST monad, etc.)
            when used in pure functions the generator will not be reseeded
            once the seed is known to an adversary it's completely broken
Rust:       https://doc.rust-lang.org/rand/rand/index.html
            by default uses an ISAAC generator with 64-bit seed, which will be reseeded frequently from /dev/urandom
            along with the relatively small seed, ISSAC generator is not recommended for cryptographic purposes
            provides cryptographically secure ChaCha generator as an alternative
            provides access to the cryptographically secure /dev/urandom through rand::os::OsRng
            provides a true random number generator based on the jitter in the CPU, which is 10^3 ~ 10^6 times slower
javascript: how Math.random() works is not stated in the language specification, thus totally implementation-dependent
            according to their blog (https://v8project.blogspot.com/2015/12/theres-mathrandom-and-then-theres.html)
            in Google's V8 engine, before a certain version they used MWC1616 with 64-bit seeds
            however the algorithm only outputs an u32, which is further truncated to 30-bits
            (Math.random() outputs a number in [0, 1), the inverse of the 30-bit output)
            https://github.com/v8/v8/blob/47c9e1c904050f82c4e527c5f86fc287856cdd3c/src/js/math.js#L133
            the seed is sampled once during launch and no obvious reseeding is done later
            after that they switched to an algorithm called xorshift128+ with 128-bit seed
            https://github.com/v8/v8/blob/ceade6cf239e0773213d53d55c36b19231c820b5/src/js/math.js#L143
            both MWC1616 and xorshift128+ are very fast but not suitalbe for cryptographic purposes
            no obvious reseed is performed after initialization
            once the seed is known to the adversary, all future random numbers in the current execution are predictable
9.2
./Cryptography_Engineering/prng
using /dev/urandom as the generator

9.3
rand crate of Rust provides a cryptographically secure PRNG called ChaCha
the pitfall is the default implementation (rand::ChaChaRng) is not automatically reseeded
who want a secure (automatically reseeding) generator have to combine it with a wrapper (rand::reseeding::ReseedingRng)
the only way to trigger a reseeding is by the size of bytes generated or manually
also it didn't specify any source of entropy
user has to explicitly provide 256-bit seeds during initialization (::from_seed()) and reseeding (through the wrapper)
as a consequence it cannot and don't have to deal with reboots: it doesn't collect entropy by itself

9.4
RNG:    pros:   truly random
        cons:   based on real events which can be manipulated by adversaries
                rekatively slow compared to PRNG (by a degree of 10^3 ~ 10^6)
                relies on real events, is not always fully available
PRNG:   pros:   fast
                do not relies on real events, numbers can be generated in fixed, constant time
                cryptographically secure PRNG is somehow unpredictable, even after a seed leakage
        cons:   not truly random, can only be computationally indistinguishable from true random numbers
                given enough (exponential) time, an adversary can always distinguish and predict a PRNG

9.5
./Cryptography_Engineering/prng

9.6
./Cryptography_Engineering/prng

9.7
-

Chapter 10
10.1
./Cryptography_Engineering/prime

10.2
./Cryptography_Engineering/prime

10.3
./Cryptography_Engineering/prime

10.4
no, 3 * 4 = 5 mod 7, 5 is not in the set

10.5
263

10.6
79

10.7
83394443253893042657835271916421478558970962746299534128004050498353405478321

10.8
./Cryptography_Engineering/prime

10.9
199
9 multiplications

Chapter 11
11.1
200 * (200 - 1) = 49800

11.2
{1, 3, 9, 5, 4}
{1, 7, 5, 2, 3, 10, 4, 6, 9, 8}
{1, 10}

11.3
for prime p > 2, by Proposition 11.2 of Introduction to Modern Cryptography, 
    Jp(x) = x^((p-1)/2) = x^q mod p, where Jp(x) is the Jacobi symbol of x in group Zp*
and in such a group Jp(x) = 1 mod p iff x is a quadratic residuo of Zp*

11.4
the public key should be changed regularly
the 128-bit security of the key-exchange protocol will be defeated by Moore's law soon or later
also when the public key is not regularly changed, a break from outside of the cryptographic system will be permanent
if e.g. an adversary acquired the key using a computer virus, security cannot be recovered

11.5
the sole purpose of a 256-bit AES key is to ensure 128-bit security somewhere else
thereby the key-exchange protocol itself cannot have less than 128-bit security, otherwise it will be the weakest link
they should use the recommended 6800-bit public key to achieve 128-bit security

Chapter 12
12.1
8458

12.2
1204

12.3
3344

12.4
gcd(e, lcm(p-1, q-1)) == 1, e is a valid public key
the corresponding secret key is 1367

12.5
gcd(e, lcm(p-1, q-1)) == 3, e is not a valid public key

12.6
when the secret key is fixed, anyone can easily decrypt any ciphertext and the encryption scheme is trivally broken

12.7
when n = pq, Pollard's rho algorithm can factor n in time O(n^(1/4))
given the factorization of n, the RSA encryption is trivally broken
therefore 256-bit RSA key can at most provide 64-bit security, worse than 128-bit security of 256-bit AES key
there are also other more efficient algorithms reduces the security of 256-bit RSA key further

12.8
σ1 = 1876, σ2 = 2206
σ3 = 5830 = σ1 * σ2 = 1876 * 2206 mod n

Chapter 13
-

Chapter 14
14.1
when this protocol is provided as some proprietary service and charged based on times been used
such a log may inaccurately increase the fee be charged

14.2
by sending multiple (Sa, Na) to Bob as the first message, Bob has to compute g^x mod p
when ||g|| is big (more than 4096 bits), such a computation will be costly, i.e. the DOS succeeds
as the protocol has to be initialized by Alice, an adversary cannot start a DOS against Alice

14.3
-

Chapter 15
15.1
the time required to copy the key may leak the length of the key in bytes
the time required to calculate the key, when the key has mathematical structures, may leak some information about it
time required for operations performed with the key, e.g. exclusive or, may depend on the exact number of bits set in it

15.2
-

Chapter 16
-

Chapter 17
17.1
assume that Alice reboots her machine every day or every week
the key KA' should be regenerated whenever the machine of Alice or the server reboots
otherwise KA' has to be stored somewhere on the persistent storage
and there is no such thing as cryptographically secure persistent storage
if the lifetime of KA' is even shorter, then it has to be regenerated during communication
either the communication between Alice and the server will be less consistent, or the protocol will be more complicated

17.2
attacker may has access to the memory of the server or Alice's machine
attacker may already learnt the master key KA, then the key negotiation protocol is compromised, as well as KA'
the key negotiation protocol may have a flaw that leaks enough information of KA' or KA
the secure channel may have a flaw that leaks enough information of KA'
Alice or the server may accientally uses the key KA or KA' somewhere else
if only KA' is known to the attacker but not KA
an attacker can learn every message Alice and the server exchanged, which includes KAB
then the attacker can also learn every message exchanged by Alice and Bob during the lifetime of KA'
the attacker can also impersonate Alice, the server or Bob, forge and manipulate messages been exchanged between them
once KA' expires, the security of the protocol is recoverd for a moment, until the attacker learnt the new key
also if the key negotiation protocol is CPA-secure, the attacker won't be able to learn KA from KA'

17.3
the implementation may have failed to wipe the memory storing the key KA'
then any other programs on Alice's machine can easily learn KA' after it expires
with KA', all keys KAB exchanged between the server and Alice during the lifetime of KA' are leaked
all communications between Alice and other participants are compromised as a result of the leakage
the protocol is again secure for a moment after the expiration of KA'
and this time the attacker cannot impersonate the participants or manipulate the messages
when the attacker learnt KA', it's no longer used

17.4
if KA is later exposed, the key negotiation protocol is compromised, the attacker can learn KA' from messages
with KA', the secure channel is compromised, the attacker can learn KAB
with KAB, all communications between Alice and Bob is no longer secure, the attacker can read them retroactively

17.5
the key negotiation protocol has to be rerun everytime the key server rebooted
assume the key negotiation protocol is flawed
if the attacker forcibly reboots the server, the attacker also forces a rerun of th key negotiation protocol
after enough amount of reboots, the attacker may learn KA from the flaw, and all further communications are compromised

17.6
it will be hard to mount any DOS attack against Alice or Bob
all cryptographic schemes used by them are symmetric, i.e. almost free
while the key negotiation protocol, as described in Chapter 14, may suffer from DOS attacks

17.7
assume the key server is provided as the IT infrastructure of a company, Alice and Bob two employees of the company
then when KAB is generated by the server, messages encrypted by KAB may be leaked to their manager
if Alice and Bob are planning to jump ship together and get new jobs elsewhere, they won't talk about that using KAB

Chapter 18
18.1
if it is the central CA, it can impersonate almost anything on the Internet
it can eavesdrop any communication between any two parties via the public network
it can fake any online commercial site and get money by fraud
it can public and sign any news as any organizations, cause mass panic and profit in stock market
it can throw anyone into jail by impersonating that person and breaking all possible laws about online activities
there are few things such a CA cannot do

18.2
an entity may hold different identities in different applications
e.g. a person may use different nicknames on two different websites
when someone goes to the CA and claims to be PA in application A, PB in application B, etc.
the CA have to be able to verify these ownerships before signing the certificates
when there is only a single universal CA, it is impossible for it to verfiy all these claims

18.3
a worldwide universal PKI has to be trusted by everyone in the world, which is certainly impossible
for instance during the cold war, a PKI located in the free world definitely won't be accepted by any socialist state
and it won't help if the PKI is founded by any "neutral country"
the amount of trust required by an universal CA is just too much for any non-ally

18.4
online card games
    authentication surely is necessary
    also in some kind of games, the communication between two players has to be hidden from other participants
    the game server can be the sole PKI
highly automated national railway system
    an attacker manipulating communications between trains and stations may cause hundreds of casualties
    the integrity and authentication of communications have to be ensured between them
    the headquarter of the national railway company can be the sole PKI
emails
    OpenPGP for example

Chapter 19
19.1 
if Alice uses the same keys for multiple PKIs
a certificate issued for one PKI is automatically a certificate for all PKIs
if the key is compromised, the attacker can impersonate Alice under all these PKIs

19.2
if more than 50 keys have been revoked, the CRL stored in the device cannot be up-to-date or complete
either the device cannot check all the revoked keys, which defeats the revocation mechanisms
or the device has to download the whole CRL every time a certificate has to be verified
which makes it an attack point of DOS

19.3
if it refuses to work when the CRL database is offline, that makes the DOS more effective
if it keeps a local copy of the CRL database and verifies the certificate according to it when the database is offline
it reduces the speed of revocations, further more the revocation time in this system is no longer consistent
if it verifies the certificates regardless of the CRL, that defeats the whole revocation mechanisms, system less secure

19.4
PKI:        more complicate, the server do not have private keys of the users
key server: less complicate, the server holds the private keys of all the users by nature
for a huge corporation with hundreds of departments all over the world, a PKI is more suitble
    every department can have its own sub-CA and issuing certificates for access to assets in the department
    it's unnecessary to have a huge key server managing all the keys, that may be even physically impossible
for an instance message service provider who is obligated to log and keep all the conversations for legal reasons
    the PKI is out of the question, communications between two users of the PKI is secure against the server
    for a key server, the communication between two users is secure against a third user, but not against the server

19.5
CRL provides instantaneous revocation
when all the devices in the system fundamentally do not work without network connection e.g. ATMs
CRL is more preferable than other methods
fast expiration relies less on consistent and fast network access, but requires more time to revoke a key
when devices in the system only have occational network access e.g. nuclear submarines, fast expiration is the choice
online certificate verification is almost always inferior to CRL
it's only preferable when all the devices in the system are rarely used, has consistant but very slow network access