Homework 1
1.
let M = ( Q, ∑, δ, s, F ) to be a DFA
a.  Q = {q0, q1, q2, q3}
    ∑ = {4, 8, 1}
    δ(q0, 4) = q1
    δ(q1, 8) = q2
    δ(q2, 1) = q3
    δ(q3, #) = q3
    δ(_, _) = q0 otherwise
    s = q0 
    F = {q3}
b.  Q = {q0 .. q13}
    ∑ = {a}
    δ(qi, a) = q(i+1 mod 14)
    s = q0
    F = {q0, q2, q4, q6, q7, q8, q10, q12}
c.  Q = {q(i, j) | i ∈ {0, 1}, j ∈ {0, 1, 2}}
    ∑ = {0, 1}
    δ(q(i, j), 0) = q(i+1 mod 2, j)
    δ(q(i, j), 1) = q(i, j+1 mod 3)
    s = q(0, 0)
    F = {q(0, 0)}
d.  Q = {q(i, j) | i, j ∈ {0, 1, 2}} ∪ {q(3, 2)}
    ∑ = {a, b}
    δ(q(i, 2), b) = q(i+1, 2) for i ∈ {0, 1, 2}
    δ(q(i, j), b) = q(i, j+1) for i ∈ {0, 1, 2}, j ∈ {0, 1}
    δ(q(3, 2), _) = q(3, 2)
    δ(q(i, j), a) = q(i, 0) for i ∈ {0, 1, 2}
    s = q(0, 0)
    F = {q(3, 2)}
e.  Q = {q0, q1, q2, q3}
    ∑ = {0, 1, 2}
    δ(qi, x) = q(3i + x mod 4)
    s = q0 
    F = Q - s

2.
merely the content of Lecture 4

3.
by induction on |y|
base: |y| = 0, y = ε
    ^δ(q, xy) = ^δ(q, x) = ^δ(^δ(q, x), ε) // definition of ^δ
induction: assume y = za and ^δ(q, xy) = ^δ(^δ(q, x), y)
    ^δ(q, xya)  = δ(^δ(q, xy), a)       // definition of ^δ
                = δ(^δ(^δ(q, x), y), a) // induction
                = ^δ(^δ(q, x), ya)      // definition of ^δ

4.
for A(i,j), let M = (Q, ∑, δ, s, F) be a DFA
Q = {qk | i ∈ {0 .. i-1}}
∑ = {0 .. j-1}
δ(qk, n) = j * k + n mod i
s = q0
F = {q0}
proof is routine

Homework 2
1.
M = ( Q, ∑, δ, s, F )
Q = {{s}, {s, t}, {s, t, u}, {s, t, u, v}}
∑ = {a, b}
δ({s}, a) = {s, t}
δ({s, t}, a) = {s, t, u}
δ({s, t, u}, a) = {s, t, u, v}
δ({s, t, u, v}, a) = {s, t, u, v}
δ(_, b) = {s} for all _ ∈ Q
s = {s}
F = {{s, t, u, v}}

2.
M = ( Q, ∑, δ, s, F )
N = ( Q, ∑, Δ, F, {s} )
Δ(q, a) = {qi | δ(qi, a) = q}
for any x ∈ L(M), x = x0x1...xn-1, xi ∈ ∑, there is a sequence (q0, q1 ... qn) that
    δ(qi, xi) = qi+1, qn ∈ F, q0 = s
then for rev x = xn-1xn-2...x0, the sequence (qn, qn-1 ... q0):
    qi ∈ Δ(qi+1, xi) for i ∈ {0 .. n-1} by definition of Δ
    q0 is a final state of N 
    qn-1 is a start state of N
thus rev x ∈ L(N)
conversely, for any x ∈ L(N), there is a sequence (q0, q1 .. qn) that 
    qi+1 ∈ Δ(qi, xi), q0 ∈ F, qn = s
by definition of Δ:
    δ(qi+1, xi) = qi for i ∈ {0 .. n-1}
similar.

3.
A is regular then A = L(M) where M = ( Q, ∑, δ, s, F )
define N = {Q x {0, 1, 2}, ∑, Δ, S, Fn} that 
    Δ((q, i), a)    = {(δ(q, a), i) | if δ(q, a) is defined}
                    ∪ {(qk, i+1) | ∃b. δ(q, b) = qk, i ∈ {0, 1}}
    S = {(s, 0)}
    Fn = F x {0, 1, 2}
then for any x0x1..xn-1 ∈ L(M) with state sequence (q0 .. qn)
for any y that H(x, y) <= 2, y = y0y1..yn-1 that yi = xi but may not be true for some j, k
define pi   = (qi, 0) for i <= j
            = (qi, 1) for j < i <= k 
            = (qi, 2) for i > k
then
    (qi+1, r)   = (δ(qi, yi), 0) when i < j, j < i < k or i > k // xi = yi
                ∈ Δ((qi, 0), yi)            // definition of Δ
    (qj+1, 1)   = (δ(qj, xj), 1)            // definition of qi
                ∈ Δ((qj, 0), yj)            // definition of Δ, true even yj = xj
    (qk+1, 2)   = (δ(qk, xk), 2)
                ∈ Δ((qk, 1), yi)            // similar
also
    p0 = (q0, 0) = (s0, 0) ∈ S 
    pn = (qn, 2) ∈ F
thus y ∈ L(N)
conversely, let y0y1..yn-1 ∈ L(N) with state sequence (p0 .. pn), pi = (qi, k), k ∈ {0, 1, 2}
fix where pi jumped from (qi, k) to (qi, k+1) (at most two places) results a string x that
    (q0 .. qn) proves x ∈ L(M)

Homework 3
1.
thanks to http://ivanzuzak.info/noam/webapps/regex_simplifier/
a.  (b+ab*a)*
b.  (a+ba*b)*ba*
c.  (b+ab*a)*+(a+ba*b)*ba*
d.  (a(bb)*a+(b+a(bb)*ba)(a(a+b(bb)*ba))*(b+ab(bb)*a))*(b+a(bb)*ba)(a(a+b(bb)*ba))*($+a(a+b(bb)*ba))

2.
let M = ( Q, ∑, δ, s, F ) be a DFA
a.  Q = {start, s0, s00, s1, s11, dead}
    ∑ = {0, 1}
    δ(start, 0) = s0
    δ(start, 1) = s1
    δ(s0, 0) = s00 
    δ(s00, 0) = start 
    δ(s1, 1) = s11 
    δ(s11, 1) = start
    δ(_, _) = dead otherwise
    s = start 
    F = {start}
b.  (for (01+10), the whole expression is just 3 M connected tail to head)
    Q = {start, q0, q1, end, dead}
    ∑ = {0, 1}
    δ(start, 0) = q0
    δ(start, 1) = q1
    δ(start, 1) = q1
    δ(q1, 0) = end
    δ(q0, 1) = end
    δ(_, _) = dead otherwise
    s = start 
    F = {end}
c.  Q = {q0, q1, q2}
    ∑ = {0, 1}
    δ(s0, 0) = s0
    δ(s0, 1) = s1
    δ(s1, 0) = s2
    δ(s1, 1) = s0
    δ(s2, 0) = s1
    δ(s2, 1) = s2
    s = q0 
    F = {q0}

3.
thanks http://www.cs.cornell.edu/courses/cs381/2002su/Materials/Homeworks/hw3/hw3-solutions.pdf
let M = ( Q, ∑, δ, s, F ) be the original DFA recognizing the set A
then define N = ( Qn, ∑, Δ, S, Fn ) that
    Qn = Q ^ 5
    S  = {(s, u, u, t, t) | u, t ∈ Q}
    Fn = {(u, u, t, t, f) | u, t ∈ Q, f ∈ F}
    Δ((p, q, r, t, u), a) = {(δ(p, b), q, δ(r, a), t, δ(u, c)) | ∀b∀c. δ(p, b) and δ(u, c) is defined}
then if a ∈ L(N), a = a0a1..an-1
    there is a sequence (s0..sn) that
        Δ(si, ai) = si+1 for i ∈ {0..n-1}, s0 ∈ S, sn ∈ Fn
    then
        s0 = (s, q, q, t, t) for some q, t ∈ Q
        sn = (q, q, t, t, f) for some f ∈ F, since Δ won't change second and forth state in the tuple
    there exists some b = b0b1..bn-1 and c = c0c1..cn-1 that 
        δ(pi, bi) = pi+1 for some p0..pn ∈ Q, p0 = s, pn = u
        δ(ui, ci) = ui+1 for some u0..un ∈ Q, u0 = t, un = f
        δ(ri, ai) = ri+1 for some r0..rn ∈ Q, r0 = u, rn = t
        (should do induction here, don't want to)
    and |a| = |b| = |c|, also for string x = abc there is a sequence that
        q = (p0 .. pn(=u0) .. un(=r0) .. rn) of length 3n+1 that
        δ(qi, xi) = qi+1
    so x = abc ∈ L(M)
conversely: similar.

Homework 4
1.
a.  define a homomorphism h that 
        h(a) = aa 
        h(b) = b
    then h(A) = {a^2nb^2n | n >= 0}
    define B = {a}h(A){b} = {a^(2n+1)b^(2n+1) | n >= 0}
    then h(A) ∪ B = {a^nb^n | n >= 0}
    if A is regular, then h(A) is regular and B, h(A) ∪ B is regular
    but h(A) ∪ B is not regular, thus A is not regular
b.  denote A = {x ∈ {a, b, c}* | x = rev x}
    then A ∩ L((a+b)*) ∩ L(a*ba*) = B is the set:
        {a^nba^n | n >= 0}
    for any k >= 0, x = ε, y = a^(k+1), z = ba^(k+1), then
        xyz ∈ B
    for any uvw = y and v != ε
        u = a^j, v = a^m, w = a^n, j + m + n = k+1, m > 0
        then pick i = 2, xuv^iwz = a^(k+2)ba^(k+1) ∉ B
    so B is not regular, and A is not regular
c.  define a homomorphism h that 
        h(a) = h(b) = h(c) = a
    then h({x ∈ {a, b, c}* | |x| = n^2, n >= 0}) = {a^(n^2) | n >= 0} = A
    for any k >= 0, let x = z = ε, y = a^((k^2)^2)
    similar argument to {x^(2^n) | n >= 0}
    thus A is not regular and {x ∈ {a, b, c}* | |x| = n^2, n >= 0}
d.  let A = PAREN ∩ L((*)*), then A = {(^n)^n | n >= 0} is not regular
    so PAREN is not regular

2.
a.  even length string with at most consecutive 0s and 1s of length 2
b.  prove by induction that if z ∈ x || y, then |z| = |xy| by induction on the size tuple (|x|, |y|)
        base case: trivial (z ∈ {y} or z ∈ {x})
        induction: assume for any tuple lexicographically smaller than (|xa|, |yb|) assumption holds
            then elements in either (x || yb) or (xa || y) has length |xy| + 1
            thus all elements in (x || yb) . {a} or (xa || y) . {b} has length |xy| + 2, which is |xayb|
    since R = x || y only contains elements of length |xy|, then for all v, w that |v| > |xy|, |w| > |xy|:
        ∀z ∈ ∑*, vz ∉ R and wz ∉ R, or vz ∈ R <=> wz ∈ R, or v ≡ w
    so for any such v and w are in the same equivalent group
    and the number of strings in ∑* of length smaller than |xy| is finite
    any such string can form one equivalent group at most, so the relation ≡ is of finite index
    so R = x || y is regular

3.
a.  the first DFA: 7 and 8 inaccessible
    the second DFA: there is no inaccessible state
b.  the first DFA: {1, 6}, {3, 4}, {2, 5}
    the second DFA: {1, 2}, {3, 4, 8}, {5, 6, 7}
c.  the first: M = {Q, {a, b}, δ, s, F}
        Q = {1, 2, 3}
        δ(1, a) = 1
        δ(1, b) = 2
        δ(2, a) = 3
        δ(2, b) = 1
        δ(3, a) = 3
        δ(3, b) = 2
        s = 1 
        F = {3}
    the second: M = ( Q, {a, b}, δ, s, F )
        Q = {1, 2, 3}
        δ(1, a) = 2
        δ(1, b) = 3
        δ(2, a) = 3
        δ(2, b) = 1
        δ(3, a) = 1
        δ(3, b) = 2
        s = 1 
        F = {1}

Homework 5
1.
a.  lemma: for strongly right linear grammar G = ( N, ∑, P, S ) x, y ∈ ∑*, A ∈ N:
        xA G->* xy => A G->* y
    base case: |y| = 0
        assume xA G->* xy = x
        if A -> aB ∈ P is ever chosen, the generated string has length at least |x| + 1
        so A -> ε ∈ P, A G->* y = ε
    induction: assume for all 0 <= |y| <= n, for all x ∈ ∑*, xA G->* xy => A G->* y
        then for some randomly chosen a ∈ ∑, let z = ay
        if xA G->* xz = xay
            A -> ε cannot be chosen since |z| > 0, there is some B that A -> aB ∈ P:
                xA G->1 xaB G->* xay
            by induction, B G->* y, A G->1 aB G->* ay
            since a is chosen randomly, xa is just any string of length |x| + 1
    then define a DFA M = {N, ∑, Δ, {S}, F} where 
        F = {A | A ∈ N and A -> ε ∈ P}
        Δ(A, a) = {B | A -> aB ∈ P}
    prove by induction that for x ∈ ∑*, ^Δ({A}, x) ∩ F != ∅ <=> A G->* x
    base case: |x| = 0, x = ε, ^Δ({A}, x) = {A}
        {A} ∩ F != ∅    <=> A -> ε ∈ P
                        <=> A G->1 ε 
                        <=> A G->* ε = x
    induction: for all |x| <= n, ^Δ({A}, x) ∩ F != ∅ <=> A G->* x, let y = ax for some a ∈ ∑
        ^Δ({A}, y)  = ^Δ({A}, ax)
                    = ^Δ(^Δ({A}, a), x)
                    = ^Δ(Δ(A, a), x) ∩ F != ∅
        then for some B ∈ Δ(A, a), ^Δ(B, x) ∩ F != ∅
        by induction, B G->* x and by A -> aB ∈ P
            A G->1 aB G->* ax, A G->* ax = y
        conversely, assume A G->* y = ax
        since |ax| > 0, A -> ε cannot be chosen, then the generation is
            A G->1 aB G->* ax and A -> aB ∈ P, B ∈ Δ(A, a)
            by lemma, B G->* x
            by induction, ^Δ({B}, x) ∩ F != ∅
        ^Δ({B}, x)  ⊆ ^Δ(Δ(A, a), x)
                    = ^Δ(A, ax) ∩ F != ∅
    then x ∈ L(M)   <=> ^Δ(S, x) ∩ F != ∅
                    <=> S G->* x
                    <=> x ∈ L(G)
    conversely, for a DFA M = {Q, ∑, δ, s, F}, define G = {Q, ∑, P, s} that
        A -> aB ∈ P iff δ(A, a) = B
        A -> ε ∈ P iff A ∈ F
    then by similar argument, ^δ(A, x) ∈ F <=> A G->* x, L(M) = L(G)
    conclusion: {L(G) | G is strongly right linear grammar} = {R | R is regular}
b.  denote the set of strongly right linear grammars as R*
    the set of strongly right linear grammars as L*
    define f: R* -> L* that for G = (N, ∑, P, S):
        f(G) = (N, ∑, P', S) with minimal set P' that satisfies:
            A -> ε ∈ P => A -> ε ∈ P'
            A -> aB ∈ P => A -> Ba ∈ P'
        for the <= direction:
            if A -> ε ∉ P and A -> ε ∈ P', removing A -> ε from P' and P' still satisfies the definition
            so P' is not minimal and contradiction
            (A -> aB case: similar)
    similarly define g: L* -> R* symmetrically
    then g o f is the identity function on R*. define G' = f(G) and G'' = g(G'):
        A -> ε ∈ P  <=> A -> ε ∈ P'
                    <=> A -> ε ∈ P''
        A -> aB ∈ P <=> A -> Ba ∈ P'
                    <=> A -> aB ∈ P''
        thus G = G'' since only the production in the four tuple is changed by f and g
    similarly, f o g is the identity function on L*
    so f, g is an isomorphism between L* and R*, f and g are bijection, especially:
        L* = {f(G) | G ∈ R*}
    now prove by induction that A G->* x <=> A G'->* rev x
    base case: |x| = 0, x = ε
        A G->* x    <=> A -> ε ∈ P
                    <=> A -> ε ∈ P'
                    <=> A G'->* x
    induction: assume for all |x| <= n, A G->* x <=> A G'->* rev x, let y = ax for a ∈ ∑
        A G->* y = ax   <=> A G->1 aB G->* ax   // since |y| > 0
                        <=> A -> aB ∈ P ∧ aB G->* ax
                        <=> A -> Ba ∈ P' ∧ B G->* x // by lemma
                        <=> A -> Ba ∈ P' ∧ B G'->* rev x    // induction
                        <=> A G'->1 Ba G'->* xa = rev y
                        <=> A G'->* rev y
        since a is chosen randomly, y = ax is a random string of length |x| + 1
    so L(G') = {rev x | x ∈ L(G)}
    L* = {rev R | G ∈ R*, R = L(G)} = {rev R | R is regular}
    but regular sets are closed under rev by homework
    so ∀R ∈ {R | R is regular},
        rev R ∈ {R | R is regular}
        rev (rev R) ∈ L*
        R ∈ L*
    and {rev R | R is regular} is just regular sets
    conclusion: L* = R*
c.  every right linear grammar have a corresponding strictly right linear grammar that generates same string sets
    for A -> x and x = x1..xn, define A -> x1A1, A1 -> x2A2, ... An -> ε
    for A -> xB and x = x1..xn, define A -> x1B1, B1 -> x2B2, ... Bn-1 -> xnB
    symmetrical for left linear grammars
        
2.
=>. if S G->* x, x ∈ (N ∪ ∑)*, then #a(x) = #b(x)
    induction on the length of derivation
    base case: S G->0 x:
        then x = S, #a(x) = #b(x) = 0
    induction: assume n >= 0, for all k <= n, S G->k x => #a(x) = #b(x)
        S G->n+1 y = S G->n x G->1 y
        at every step one rule must be chosen from P 
            case S -> aSb: #a(y) = #b(y) = #a(x) + 1
            case S -> bSa: similar
            case S -> SS: #a(y) = #b(y) = #a(x)
            case S -> ε: #a(y) = #b(y) = #a(x)
        so #a(y) = #b(y)
<=. if x ∈ ∑*, #a(x) = #b(x), then S G->* x
    induction on the length of x
    base case: |x| = 0, x = ε
        S G->1 ε
    induction: for some |x| > 0 (|x| >= 2 since no |x| = 1 satisfies the condition), assume all |y| < |x|, S G->* y
        if there is a proper prefix y of x that 0 < |y| < |x|, #a(y) = #b(y)
            then x = yz and #a(z) = #a(x) - #a(y) = #b(x) - #b(y) = #b(z), |z| < |x|
            so S G->* y and S G->* z, S G->1 SS G->* yz = x
        if there is no proper prefix y of x that #a(y) = #b(y)
            denote x = αzβ, α, β ∈ ∑
            if α = a, assume β = a then 
                #a(α) - #b(α) = 1
                #a(αz) - #b(αz) = -1
                the function #a(y) - #b(y) over the prefixes of a string only move by 1 on each character
                so there must be some y that y is a prefix of x and #a(y) = #b(y), contradiction
            thus β = b, #a(z) = #b(z) = #a(x) - 1
            S G->1 aSb G->* azb
            if α = b: similar

3.
S -> (S) | [S] | SS | ε
=>. S G->* x => f(x) ∈ PAREN2, f(x) = x with all nonterminal symbol stripped
    induction on length of derivation
    base case: S G->0 x, x = S, f(x) = ε ∈ PAREN2
    induction: for n >= 0, assume for all k <= n, S G->k x => f(x) ∈ PAREN2
        then S G->n+1 y = S G->1 z G->n y
        z = (S) | [S] | SS | ε
        for (S) and [S] case, y must be (w) or [w] that S G->n w
        for SS, assume SS G->k y, y = w1w2
            the CFG may only apply k1 times to first S and k2 to the second, where k1+k2 = k, k1 < n and k2 < n
            so f(w1), f(w2) ∈ PAREN2, by (iii) f(y) = f(w1)f(w2) ∈ PAREN2
        case ε is impossible
<=. x ∈ PAREN2 => S G->* x
    induction by subderivations
    (similar)

4.
M = ({q}, {[, (, ), ]}, {[, (}, δ, q, ⊥, F)
accept by empty stack so F is irrelevant
δ = { ((q, [, Γ), (q, [Γ))
    , ((q, (, Γ), (q, (Γ))
    , ((q, ], [), (q, ε))
    , ((q, ), (), (q, ε))
    , ((q, ε, ⊥), (q, ε)) }
    where Γ ranges over all stack symbol

Homework 6
1.
induction on the length of derivations
for x ∈ ∑*, x != ε
prove:  S G->* x => #a(x) = #b(x)
        A G->* x => #a(x) = #b(x) + 1
        B G->* x => #a(x) + 1 = #b(x)
base case: G->1 and G->2
    S G->2 ab | ba
    A G->1 a
    B G->1 b
induction: assume n >= 2, for all k <= n, if there is some x ∈ ∑*, x != ε
    S G->k x => #a(x) = #b(x)
    A G->k x => #a(x) = #b(x) + 1
    B G->k x => #a(x) + 1 = #b(x)
    then if S G->n+1 x, x ∈ ∑*, x != ε
        S G->1 aB G->n ay or S G->1 bA G->n az
        by induction #a(y) + 1 = #b(y), #a(z) = #b(z) + 1
        thus #a(ay) = #b(ay), #a(az) = #b(az)
    if A G->n+1 x,
        A G->1 aS G->n ay or A G->1 bAA G->n bvw
        aS case is similar to the previous argument 
        bAA G->n bvw means A G->k1 v, A G->k2 w, k1 + k2 = n, by induction assumption
            #a(v) = #b(v) + 1, #a(w) = #b(w) + 1
        thus #a(bvw) = #b(bvw) + 1
    if B G->n+1 x,
        symmetric
conversely, induction on the length of x that 
    for x ∈ ∑*, x != ε,
    S G->* x <= #a(x) = #b(x)
    A G->* x <= #a(x) = #b(x) + 1
    B G->* x <= #a(x) + 1 = #b(x)
base case: |x| <= 2
    ab and ba is derivable from S, S G->2 ab
    a and b is derivable from A and B
induction: assume for n >= 2 is even, for all x that |x| <= n,
    #a(x) = #b(x) => S G->* x
    #a(x) = #b(x) + 1 => A G->* x
    #a(x) + 1 = #b(x) => B G->* x
    then for |y| = n + 1, if #a(y) = #b(y) + 1
        if y = ax, #a(x) = #b(x) and |x| <= n, by induction A G->1 aS G->* ax
        if y = bx, #a(x) = #b(x) + 2, then for some v, w x = vw
            since #a(p) - #b(p) over some prefix of x only move by 1 every character, there must be some v that
                #a(v) - #b(v) = 1
            then #a(w) - #b(w) = 1 and w != ε since #a(x) - #b(x) = 2
            by induction A G->1 bAA G->* bvw = bx
    if for |y| = n+1, #a(y) + 1 = #b(y)
        symmetrically, B G->* y
    if for |y| = n+2, #a(y) = #b(y)
        if y = ax, then #a(x) + 1 = #b(x), S G->1 aB G->* ax
        if y = bx, similar

2.
M = ( {q}, {a, b}, {a}, δ, ⊥, q, ∅ )
δ = { ((q, a, a), (q, aa))
    , ((q, b, a), (q, ε))
    , ((q, ε, ⊥), (q, ε)) }
accept by empty stack

3.
a.  for any k >= 0, let n = 2^(k+1) + 2^2(k+1) - 1
    that is, b(n) = 10..01..1, or 10{k+1}1{k+1}
    then b(n+1) = 10..010..0, or 10{k}10{k}
    z = b(n)$b(n+1) ∈ L(G), |z| = 4k+9 >= k
    let z = uvwxy that vx != ε, |vwx| <= k
    if all vwx are in b(n) or b(n+1), v^2wx^2 will change one number but leave the other intact
    if v or x contains $, v^2wx^2 will have two occurrence of $
    thus $ is in w and v in the last k bits of b(n), w in the first k bits of b(n+1)
    where v ∈ 1* and w = 10* + 0*
    if v != ε, v^2 appends some 1s to the end of b(n) forms b(n')
    and b(n'+1) should add that much 0s to the end of b(n+1), but it's impossible by multiplying w
    if v = ε, v^2wx^2 only changes b(n+1)
    so {b(n)$b(n+1) | n >= 1} is not CFL
b.  show that {rev b(n)$b(n+1) | n >= 1} is a CFL 
    by constructing a NPDA that calculate b(n+1) on the fly when reading rev b(n)
    M = {{q1, q2, q3}, {0, 1}, {0, 1}, δ, ⊥, q1, ∅} accepts by empty stack
    q1 and q2 simulate the carry bit in a digital adder
    δ = { (q1, 0, A), (q1, 1A)
        , (q1, 1, A), (q2, 0A)  
        , (q2, 0, A), (q1, 1A)
        , (q2, 1, A), (q2, 0A)
        , (q1, $, A), (q3, A)
        , (q2, $, A), (q3, 1A)  // for A ∈ {0, 1}
        , (q3, 1, 1), (q3, ε)
        , (q3, 0, 0), (q3, ε)
        , (q3, ε, ⊥), (q3, ε) }

4.
original form:
    S -> (S) | [S] | SS | ε
get rid of ε productions:
    S -> (S) | [S] | () | [] | SS
chomsky form:
    S -> AE | CF | AB | CD | SS 
    A -> [
    B -> ]
    C -> (
    D -> )
    E -> SB
    F -> SD
Greibach form:
    regular sets:
        RA,[ = RB, ] = RC,( = RD,) = ε
        RS,[ = (E+B)S*
        RS,( = (F+D)S*
        RE,[ = (E+B)S*B
        RE,( = (F+D)S*B
        RF,[ = (E+B)S*D
        RF,( = (F+D)S*D
    right-linear grammars:
        TA,[ -> ε
        TB,] -> ε
        TC,( -> ε
        TD,) -> ε
        TS,[ -> EX | BX, X -> SX | ε
        TS,( -> FX | DX, X -> SX | ε
        TE,[ -> EY | BY, Y -> SY | BZ, Z -> ε
        TE,( -> FY | DY, Y -> SY | BZ, Z -> ε
        TF,[ -> EV | BV, V -> SV | DZ, Z -> ε
        TF,( -> FV | DV, V -> SV | DZ, Z -> ε
    combine:
        S -> [TA,[E | (TC,(F | [TA,[B | (TC,(D | [TS,[S | (TS,(S
        E -> (TS,(B | [TS,[B
        F -> (TS,(D | [TS,[D
        TA,[ -> ε
        TB,] -> ε
        TC,( -> ε
        TD,) -> ε
        TS,[ -> (TE,(X | [TE,[X | ]TB,]X, X -> (TS,(X | [TS,[X | ε
        TS,[ -> (TF,(X | [TF,[X | )TD,)X, X -> (TS,(X | [TS,[X | ε
        TE,[ -> (TE,(Y | [TE,[Y | ]TB,]Y, Y -> (TS,(Y | [TS,[Y | ]TB,]Z, Z -> ε
        TE,[ -> (TF,(Y | [TF,[Y | )TD,)Y, Y -> (TS,(Y | [TS,[Y | ]TB,]Z, Z -> ε
        TE,[ -> (TE,(Y | [TE,[Y | ]TB,]Y, Y -> (TS,(Y | [TS,[Y | )TD,)Z, Z -> ε
        TE,[ -> (TF,(Y | [TF,[Y | )TD,)Y, Y -> (TS,(Y | [TS,[Y | )TD,)Z, Z -> ε
    get rid of ε productions:
        routine.

Homework 7
1.
wrote a Haskell program for it, see ./Automata_HW7_parser

2.
assume M = ( Q, ∑, Γ, δ, ⊥, s, F ) is the NPDA accepting A by final state
assume N = ( Qn, ∑n, δn, sn, Fn ) is the DFA accepting R
construct a new NPDA M' = {QxQn, ∑ ∪ ∑n, Γ, δ', ⊥, (s, sn), FxFn} that 
δ' = {(((q, qn), a, A), ((p, pn), α)) | ((q, a, A), (p, α)) ∈ δ and δn(q, a) = p}
easy to verify that if some s is accepted by both M and N, it's accepted by M' and verse versa

3.
a^nb^n and c^n are CFLs
a^nb^n || c^n ∩ a*b*c* = a^nb^nc^n is not a CFL

4.
see Homework 9/5

Homework 8
1.
rewrite the first a to c
loop until no a left:
    rewrite every c to b
    for every b from left end of the tape, rewrite the leftmost a to c
    if find a blank: break since all a are rewritten
if there are only c on the tape then accept, otherwise reject

2.
a.  a deterministic LBA is a 9-tuple that
    M = (Q, ∑, Γ, |-, -|, δ, s, t, r) that
        Q is a finite set of states;
        ∑ is a finite alphabet of input symbol;
        Γ is a finite alphabet of tape symbol, ∑ ⊆ Γ;
        |- is the left endmarker and |- ∈ Γ - ∑ 
        -| is the right endmarker and -| ∈ Γ - ∑ 
        δ: QxΓ -> QxΓx{L,R} is a transition function and 
            δ(_, |-) -> (_, |-, R)
            δ(_, -|) -> (_, -|, L)
            δ(t, _) -> (t, _, _)
            δ(f, _) -> (f, _, _)
            left and right endmarker cannot be rewritten
            the read/write head cannot go further left/right than the left/right endmarker
            once the machine is in accept/reject state, it never leaves
        s ∈ Q is a starting state 
        t ∈ Q is a accepting state 
        r ∈ Q and r != t is a rejecting state
    define a configuration as an element of QxΓ*xN
    define substitution function s(n, a, β) as in the definition of TMs 
    define M->1 as:
        (p, z, n)   M->1 (q, s(n, b, z), n+1) if δ(p, zn) = (q, b, R)
                    M->1 (q, s(n, b, z), n-1) if δ(p, zn) = (q, b, L)
    define M->* as the reflexive transitive closure of M->1 that 
        c M->0 c
        if c M->n c' and c' M->1 c'', then c M->n+1 c''
        and c M->* c' if ∃n that c M->n c'
    define starting configuration cs = (s, |-x-|, 0) where x ∈ ∑* is the input string
    define acceptance as
        cs M->* (t, _, _)
b.  for any particular input string x, the length of tape is fixed as |x| + 2
    so there are |Γ|^|x| possible tape strings as endmarkers cannot be overwritten
    so the number of possible configurations are |Q| * |Γ|^|x| * (|x| + 2)
c.  since there are only |Q| * |Γ|^|x| * (|x| + 2) possible configurations
    after that much steps the machine must have been in the same configuration twice (pigeon hole)
    if a machine never enters accept or reject state after that much steps, then it's in a loop & will never enter
    then build a machine that:
        for M#x run M on x for |Q| * |Γ|^|x| * (|x| + 2) steps, if M never in t or r then it will not halt
d.  thanks http://www.cs.cornell.edu/courses/cs381/2002su/Materials/Homeworks/hw6/hw6-solns.pdf
    a few addition:
        a turing machine has an encoding in {0,1}*
        and strings in {0,1}* can be enumerated lexicographically
        the validity of an encoding can be verified by a universal machine
        thus turing machines can be enumerated in some way
        LBAs are just turing machines with some restrictions, so them can be verified and enumerated as well
    with a matrix that top axis be strings in ∑* enumerated in some way and left axis LBAs
    let matrix entries be acceptance of strings in corresponding machines
    by taking complement of diagonal there is a set L that is not recognized by any LBA
    to verify x ∈ L, one can build a machine that 
        enumerates strings in the way of the top axis and find i, the index of x
        enumerates LBAs to the index i to get the corresponding LBA, M
        run M on x and accepts if M rejects or not halting (which is possible in finite steps), rejects if M accepts
    since this machine is total, L is a recursive set
3.
see Homework 9/5

Homework 9
1.
short prove: It's nontrivial
reuse the reduction from HP to FIN
if M does not halts on x, L(M') = ∅, or it never enter accept states
if M halts on x, L(M') = ∑*, or it enters accept states for any input 
so FIN can be reduced to "if M' ever enters the accept state"

2.
short prove: It's nontrivial
reuse the reduction from HP to FIN
if M does halt on x, L(M') = ∑*, otherwise L(M') = ∅
by compare whether M' accepts the same set with a trivial machine that starts in accept state
FIN can be reduced to this comparison

3.
the membership of VALCOMPS can be computed by a LBA 
for the conditions (1) to (5) in Lecture 35, non of them requires semi-infinite tape
so for any turing machine M, there exists a LBA M' that
    give x = #a0#...#an, determines if x is a valid computation history of M 
then halting problem can be reduced to emptiness of L(M')

4.
thanks http://www.cs.cornell.edu/courses/cs381/2000FA/Assignments/hw11_soln.pdf
"increasing order" here means a total order on strings?
=>  build a string that enumerates strings in lexicographical order and filter-print them with acceptance of M
    since M is total, membership test of M always halts, any accepted string will be enumerated in finite time 
<=  given a enumerator of M that enumerates member of L(M) in increasing order
    for any given string x, keep the enumerator running until it enumerates some y > x in that total order
    if x ever enumerated before that, then x ∈ L(M)
    if x never enumerated at that point, then it will never be enumerated since enumerator is in increasing order 
    this only works for infinite set
    since for finite set L(M) has a maximum string y, any test x > y will not halt
    but finite sets are regular and trivially recursive, so this doesn't matter

5.
thanks https://people.eecs.berkeley.edu/~luca/cs172-07/solutions/practicefinal-sol.pdf
a.  let M = (Q, ∑, δ, s, F) and L(M) = A
    let F' = {q ∈ Q | ∃x ∈ B that ^δ(q, x) ∈ F} for A/B and 
        F' = {q ∈ Q | ∀x ∈ B that ^δ(q, x) ∈ F} for A <- B
    then M' = (Q, ∑, δ, s, F') is a DFA for A/B or A <- B
b.  let M = {{q}, ∑, δ, q, {q}} and δ(q, _) = q, for A/B:
        if L(B) = ∅, then F' = ∅ 
        if L(B) is not empty, then F' = {q}
    so the emptiness of a r.e. set reduces to the membership of F', which is undecidable

Homework 10
1.
from M#x ∈ HP, define a machine M' that 
    erases its input
    write x on the tape, which is hard coded in M'
    runs M on x, which is hard coded in M'
    if M halts, accept the input
then M' halts on all input iff M#x halts
define σ(M#x) = M', then σ reduces HP to TOTAL and ~HP to ~TOTAL, thus neither TOTAL nor its complement is decidable

2.
a.  there's no way to copy the input string, since 
        it's impossible to mark the already copied portion or change anything
        every time the read head moves beyond the right end of input, the only information it carries is the state
        since Q is finite, when |x| >> |Q| there's no way to remember what it has copied and what hasn't 

3.
this variant of VALCOMPS can be described as intersection of two CFLs 
one generates configurations with proper next configuration relations on position (1,2) (3,4) (5,6)...
the other generates configurations with proper next configuration relations on position (2,3) (4,5) (6,7)...
then their intersection has proper next configuration relations on all neighboring pairs (i, i+1)
and HP can be reduced to the emptiness of VALCOMPS, so the emptiness of intersection of CFLs is undecidable
the language will be something like:
    // strings in VALCOMPS is delimited by #s
    S -> #C#
    C -> C#C | A
    A -> (some 3 symbols)A(some 3 symbols, consistent, reversed) | B
    // only the last few symbols may not have the same length: e.g. write on a previously blank position
    B -> (some 1-3 symbols)#(some 1-3 symbols, consistent, reversed)

Homework 11
1.
=>  if A is r.e., then there exists an enumeration machine E that L(E) = A 
    modify the machine E that when it enumerates, append an index starting from 0 to the end of x 
    so instead of x, E' enumerates x#b(i) 
        where i is a count starting from 0 and increments by 1 for every enumeration 
        (theoretically possible: computing b(n+1) can be done with NPDA, so surely TM can do it)
    then L(E') is recursive, since L(E') is enumerated in increasing order (the #b(i) part)
<=  for A = {x ∈ {0, 1}* | ∃y R(x, y)}, define a machine that
        for any input x, enumerate y lexicographically and check x#y in R(x, y)
        since R(x, y) is recursive, the test will accept in finite time if x ∈ A
        if x ∉ A, the machine reject by not halting
    so A is r.e.

2.
by Homework 10/3, VALCOMPS of a TM M can be described as intersection of two CFLs A1 and A2 that
    A1 ∩ A2 = ∅ iff L(M) = ∅
since CFLs are closed under concatenation, give three symbols abc not in A1 or A2 that
    B1 = {a^mb^mc^n | m, n >= 0}, B2 = {a^mb^nc^n | m, n >= 0}
then A1B1 ∩ A2B2 is a CFL iff A1 ∩ A2 = ∅ (where A1B1 ∩ A2B2 = ∅)

Homework 12
1.
a.  S -> abcS | abc 
    ab -> ba
    ba -> ab
    // ... all two-symbol rearrangements
b.  
