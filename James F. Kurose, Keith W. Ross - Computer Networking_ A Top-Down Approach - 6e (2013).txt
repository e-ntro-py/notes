/// only problems and some labs, skipping all review questions
/// resource site: https://wps.pearsoned.com/ecs_kurose_compnetw_6/216/55463/14198700.cw/-/14198926/index.html
/// errata: https://media.pearsoncmg.com/aw/ecs_kurose_compnetwork_6/Errata_6th_Edition.pdf
/// Wireshark Labs: https://github.com/ashly13/Computer-Networking---A-Top-Down-Approach/tree/master/Wirshark%20Labs

1.1
// all message transmitted will be shown in JSON
the client (teller machine) first sends a message of account ID and (possibly hashed) password:
    {
        id: String,
        password: String
    }
the server receives the message, check the password against the id, sends back either 
    an error or 
    an accepted message and moves into the Verified state
the error should be as general as possible for security reason
    // one of the two is sent
    "ERROR"
    "ACCPETED"
once accepted, the client can query for account balance:
    "BALANCE"
    // server response, only in Verified state
    {
        balance: Number
    }
    // not in Verified state
    "VERIFICATION REQUIRED"
or try withdraw an amount of cash:
    {
        withdraw: Number
    }
    // server response, one of them, only in Verified state
    "Insufficient balance"
    {
        withdraw: Number
        // client machine disburse cash
    }
    // not in Verified state
    "VERIFICATION REQUIRED"
at the end client issues a logout, server responses and exit Verified state
    "LOGOUT"
    // server response
    "LOGOUT ACCEPTED"
logout must be mandatory on leave, e.g. the teller machine will only login with physical insertion of a debit card
and automatically logout on ejection of the debit card
the channel must be encrypted

1.2
assuming these packets are the only packets in the network
throughput is uniform among links, end host can send the next packet immediately after the current one
end host start sending the last packet at time (P-1)L/R, it will reach the other end host (P-1)L/R + NL/R
total delay is (P + L - 1)L/R

1.3
a.  a circuit-switched network will be more appropriate if
        k is small enough (there's no waste of network capacity)
        client and server of the application is geographically close
        (otherwise it's better to reuse the existing packet-switched Internet)
b.  congestion control is still necessary, routers may not be processing the packets quick enough

1.4
a.  16, 4 between each two neighboring switches
b.  8, 4 on path A -> B -> C, 4 on path A -> D -> C
c.  possible:
        2 on path A -> B -> C
        2 on path A -> D -> C
        2 on path B -> A -> D
        2 on path B -> C -> D

1.5
assume it takes the tollbooth R minutes to process a car 
if all toollbooth operates at the same rate, there's no queuing delay except in front of the first tollbooth
last car in the caravan is processed by the first toolbooth at (P - 1)R
it finishes after the third toolbooth at (P - 1)R + 60 * 150/100 + 3R = (P + 2)R + 90
a.  7R + 90
b.  10R + 90

1.6
a.  m/s sec
b.  L/R sec
c.  m/s + L/R sec
d.  at the A-end of the link
e.  at Host B
f.  somewhere in the link
g.  m / s = L / R
    m / 2.5e8 = 120 / 56 / 1024
    m = 523.1584km

1.7
assume 8-bit bytes (octets)
transmission delay is 56 * 8 /(2 * 1024 * 1024) = 0.2136ms
propagation delay = 2ms
if the bit is the first of a 56-byte packets:
    encode delay = 56 * 8 / (64 * 1024) = 6.8359ms
if the bit is the last of a 56-byte packets:
    no encode delay
overall between 2.2136ms and 0.0495ms

1.8
a.  [3 * 1024 / 150] = 20
b.  10%
c.  C(120, n)0.1^n0.9^(120 - n)
d.  by normal approximation to binomial:
    P(N >= 21)  ≒ P(X >= 21), X ~ N(12, 10.8)
                = 0.00308495

1.9
a.  [1024 * 1024 / 100] = 10485
b.  Σ{N < k <= M}(C(M, k)p^k(1-p)^(M-k))

1.10
assume the end hosts do not incur switch delays
total delay:
    2dproc + Σi (di / si + L / Ri)
numerical delay:
    0.002 * 3 + (5000 + 4000 + 1000) / 2.5e6 + 1500 * 8 * 3 / (2 * 1024^2) 
    = 0.0272s = 27.2ms

1.11
one transmission delay only without store-and-forward
L/R + Σi di / si

1.12
queueing delay:
    4.5 * 1500 * 8 / (2 * 1024^2) = 0.0257
    (nL + x)/R

1.13
a.  Σk {0 <= k <= N - 1}(kL/R) / N
    = (N-1)L / 2R
b.  if N packets arrives at the same time every LN/R seconds, same to part a
    all N packets can be transmitted in LN/R, two bursts of packets do not interfere with each other

1.14
a.  delay   = IL/R(1 - I) + L/R
            = a(L/R)^2/(1 - L/R) + L/R
b.  https://www.wolframalpha.com/input/?i=plot%28x%2C+x%5E2%2F%281+-+x%29+%2B+x%29

1.15
μ = L/R
delay = aμ^2 / (1 - μ) + μ

1.16
N = 10, d = 10ms + dtrans = 10ms + 1/100s = 20ms
a = N/d = 0.5 packet/ms

1.17
a.  dend-end = Σi(diproc + ditrans + diprop)
b.  E[D] = Σi(diproc + ditrans + diprop + dqueue)

1.18
 1  203.98.68.97 (203.98.68.97) [AS10145]  0.278 ms (255)  0.305 ms (255)  0.282 ms (255) (0% loss)
 2  203.98.68.253 (203.98.68.253) [AS10145]  0.493 ms (63)  0.52 ms (63)  0.431 ms (63) (0% loss)
 3  73.194.233.220.static.exetel.com.au (220.233.194.73) [AS10143]  0.898 ms (253)  1.001 ms (253)  0.827 ms (253) (0% loss)
 4  * * * (100% loss)
 5  Bundle-Ether59.chw-edge903.sydney.telstra.net (203.54.151.81) [AS1221]  2.097 ms (251)  1.7 ms (251)  1.529 ms (251) (0% loss)
 6  bundle-ether17.chw-core10.sydney.telstra.net (203.50.11.176) [AS1221]  3.587 ms (250)  2.826 ms (250)  2.558 ms (250) (0% loss)
 7  bundle-ether8.exi-core10.melbourne.telstra.net (203.50.11.125) [AS1221]  14.751 ms (249)  15.076 ms (249)  14.622 ms (249) (0% loss)
 8  bundle-ether2.exi-ncprouter101.melbourne.telstra.net (203.50.11.209) [AS1221]  12.979 ms (248)  12.783 ms (248)  12.743 ms (248) (0% loss)
 9  www.telstra.net (203.50.5.178) [AS1221]  12.518 ms (247)  12.594 ms (247)  12.6 ms (247) (0% loss)
a.  // skipped
b.  // skipped
c.  3 I guess? one anonymous, exetel and telstra
 1  gigabitethernet3-3.exi1.melbourne.telstra.net (203.50.77.49)  0.287 ms  0.269 ms  0.241 ms
 2  bundle-ether3-100.exi-core10.melbourne.telstra.net (203.50.80.1)  1.984 ms  1.542 ms  2.115 ms
 3  bundle-ether12.chw-core10.sydney.telstra.net (203.50.11.124)  12.604 ms  12.037 ms  12.733 ms
 4  bundle-ether1.oxf-gw11.sydney.telstra.net (203.50.6.93)  12.356 ms  12.309 ms  12.970 ms
 5  bundle-ether1.sydo-core03.sydney.reach.com (203.50.13.98)  47.815 ms  48.011 ms  46.750 ms
 6  i-73.paix-core02.telstraglobal.net (202.84.247.45)  200.086 ms  199.183 ms  200.618 ms
 7  i-92.paix02.telstraglobal.net (202.84.247.41)  199.623 ms  199.929 ms  200.372 ms
 8  liberty_global-peer.eqnx03.pr.telstraglobal.net (134.159.63.85)  198.252 ms  198.181 ms  198.250 ms
 9  be2015.ccr21.sfo01.atlas.cogentco.com (154.54.7.173)  200.120 ms  200.052 ms  199.748 ms
10  be3109.ccr21.slc01.atlas.cogentco.com (154.54.44.138)  215.362 ms  215.043 ms  214.991 ms
11  be3037.ccr21.den01.atlas.cogentco.com (154.54.41.146)  225.486 ms  225.537 ms  225.987 ms
12  be3035.ccr21.mci01.atlas.cogentco.com (154.54.5.90)  237.224 ms  237.282 ms  237.601 ms
13  be2831.ccr41.ord01.atlas.cogentco.com (154.54.42.166)  249.493 ms  248.886 ms  248.849 ms
14  be2717.ccr21.cle04.atlas.cogentco.com (154.54.6.222)  256.835 ms  256.020 ms  256.339 ms
15  be2993.ccr31.yyz02.atlas.cogentco.com (154.54.31.226)  263.587 ms  263.391 ms  263.084 ms
16  38.104.158.202 (38.104.158.202)  269.711 ms  268.513 ms  268.584 ms
d.  roundtrip delay skyrocketed from 12ms to 269ms

1.19
a.  http://traceroute.sdv.fr/
    1	wblindix.sdv.fr      	212.95.66.126      	0.129 ms
    2	border-gateway2.sdv.fr      	212.95.69.227      	0.749 ms
    3	6k-2-sfr-str-e2-3-sdv-plurimedia.customers-sfr-str.ielo.net      	212.85.149.172      	0.894 ms
    4	frpar-th2-c6k1.as29075.net      	185.96.186.74      	6.655 ms
    5	te0-1-0-7.frpar-th2-a9k1.as29075.net      	185.96.186.239      	6.915 ms
    6	be4.frpar-th2-n55h1.as29075.net      	185.18.172.147      	6.945 ms
    7	hu0-0-1-0.frpar-eqx3-n55h1.as29075.net      	185.96.186.118      	7.084 ms
    10	4.14.33.54      	4.14.33.54      	153.228 ms
    11	138.197.244.228      	138.197.244.228      	152.676 ms
    12	138.197.248.207      	138.197.248.207      	173.624 ms
    13	159.203.251.185      	159.203.251.185      	153.57 ms
    https://www.as30781.net/nettools/traceroute/
    #1	JAGUAR-AS (AS30781)	85.31.192.253	be3-200.hr01-corp.mar02.jaguar-network.net	0.851 ms	
    #2	JAGUAR-AS (AS30781)	78.153.231.39	be1.er02.mar02.jaguar-network.net	0.779 ms	
    #3	*	*	*	*	*
    #4	*	*	*	*	*
    #5	AS3356	4.14.33.54	4.14.33.54	162.868 ms	
    #6	*	*	*	*	*
    #7	*	*	*	*	*
    #8	DOSFO (AS14061)	159.203.251.185	159.203.251.185	169.888 ms	
    one in common: 4.14.33.54, a Level 3 Communications switcher in Fremont, US
    it should be the transatlantic link, AS29075 preceeding it is in France
b.  http://www.han.de/cgi-bin/nph-trace.cgi
    1  * * *
    2  ae3-u100.cr-nunki.sxb1.bb.godaddy.com (87.230.112.2)  0.369 ms  0.264 ms  0.311 ms
    3  ae4.cr-vega.sxb1.bb.godaddy.com (87.230.114.66)  0.361 ms  0.342 ms  0.317 ms
    4  lag-125.ear2.Paris1.Level3.net (213.242.120.245)  6.538 ms  6.814 ms  7.003 ms
    5  * * *
    6  4.14.33.54 (4.14.33.54)  164.563 ms  164.506 ms 4.14.33.70 (4.14.33.70)  162.352 ms
    7  138.197.244.226 (138.197.244.226)  159.937 ms 138.197.244.230 (138.197.244.230)  159.463 ms  165.193 ms
    8  * * *
    9  159.203.251.185 (159.203.251.185)  157.534 ms  162.840 ms  162.609 ms
    the same transatlantic link 4.14.33.54 appeared
c.  #traceroute www.linkwan.com
    traceroute to www.linkwan.com (218.16.120.36), 30 hops max, 60 byte packets
    1  104.236.128.253 (104.236.128.253)  0.369 ms  0.314 ms  0.272 ms
    2  138.197.248.222 (138.197.248.222)  0.643 ms  11.188 ms  0.520 ms
    3  138.197.244.225 (138.197.244.225)  1.192 ms 138.197.244.229 (138.197.244.229)  1.161 ms 138.197.244.231 (138.197.244.231)  1.171 ms
    4  lag-112.ear2.SanJose1.Level3.net (4.14.33.69)  1.705 ms lag-111.ear2.SanJose1.Level3.net (4.14.33.53)  1.724 ms  1.893 ms
    5  ae-1-9.edge2.SanJose3.Level3.net (4.69.209.181)  1.819 ms ae-3-19.edge2.SanJose3.Level3.net (4.69.209.189)  2.103 ms  1.964 ms
    6  CHINA-TELEC.edge2.SanJose3.Level3.net (4.53.210.118)  5.784 ms CHINA-TELEC.edge2.SanJose3.Level3.net (4.53.210.210)  5.039 ms  4.991 ms
    7  202.97.50.77 (202.97.50.77)  8.361 ms  8.284 ms  8.205 ms
    8  202.97.89.137 (202.97.89.137)  180.948 ms  180.921 ms  180.882 ms
    9  202.97.94.97 (202.97.94.97)  178.113 ms  178.151 ms  178.428 ms
    10  202.97.94.145 (202.97.94.145)  178.605 ms  178.601 ms  178.553 ms
    11  113.96.254.17 (113.96.254.17)  176.119 ms 113.96.254.37 (113.96.254.37)  190.280 ms  190.465 ms
    12  218.16.126.205 (218.16.126.205)  178.072 ms  178.474 ms  178.818 ms
    13  121.14.130.134 (121.14.130.134)  177.900 ms  184.418 ms  184.616 ms
    14  218.16.120.36 (218.16.120.36)  177.238 ms  177.315 ms  177.094 ms
    #traceroute v-www.ihep.ac.cn
    traceroute to v-www.ihep.ac.cn (202.38.128.8), 30 hops max, 60 byte packets
    1  104.236.128.253 (104.236.128.253)  12.702 ms  12.722 ms  12.711 ms
    2  138.197.248.206 (138.197.248.206)  0.719 ms  0.866 ms 138.197.248.222 (138.197.248.222)  0.737 ms
    3  64.86.208.18 (64.86.208.18)  0.486 ms 64.86.208.16 (64.86.208.16)  0.488 ms  0.473 ms
    4  if-ae-22-2.tcore2.sqn-san-jose.as6453.net (64.86.21.101)  2.298 ms  2.240 ms  2.263 ms
    5  if-ae-1-2.tcore1.sqn-san-jose.as6453.net (63.243.205.1)  2.300 ms  2.277 ms  2.325 ms
    6  be6453.ccr41.sjc03.atlas.cogentco.com (154.54.12.141)  2.175 ms  2.184 ms  2.307 ms
    7  be3669.ccr21.sfo01.atlas.cogentco.com (154.54.43.9)  3.485 ms  3.477 ms be3670.ccr22.sfo01.atlas.cogentco.com (154.54.43.13)  3.454 ms
    8  be3694.ccr21.pdx01.atlas.cogentco.com (154.54.84.30)  21.975 ms  22.066 ms be3693.ccr21.pdx01.atlas.cogentco.com (154.54.81.66)  22.323 ms
    9  be3701.ccr21.hkg02.atlas.cogentco.com (154.54.87.122)  155.931 ms  155.930 ms  155.908 ms
    10  154.18.4.2 (154.18.4.2)  157.582 ms  157.347 ms  157.375 ms
    11  8.201 (159.226.254.5)  190.629 ms  190.336 ms  190.597 ms
    12  8.200 (159.226.254.49)  196.974 ms 8.201 (159.226.254.41)  191.384 ms  191.588 ms
    13  8.198 (159.226.254.158)  191.225 ms 8.209 (159.226.254.162)  199.614 ms  199.600 ms
    14  * * *
    15  sslvpn1.ihep.ac.cn (202.122.36.2)  202.456 ms  202.438 ms  202.276 ms
    16  * * *
    17  * * *
    18  * * *
    19  * * *
    20  * * *
    21  * * *
    22  * * *
    23  * * *
    24  * * *
    25  * * *
    26  * * *
    27  * * *
    28  * * *
    29  * * *
    30  * * *
    only the first two
    they do diverge before reaching China

1.20
min(Rs, Rc, R/M)

1.21
one path:
    max(k){min(i){Rki}}
all paths:
    Σk min(i){Rki}

1.22
p(loss) = 1 - (1-p)^N
X ~ Geometric((1-p)^N), E[X] = 1 / (1-p)^N

1.23
a.  trace of last bit of package 1 
        L/Rs:   leaves A
        +dprop: reaches switch
        +L/Rc:  leaves switch
        +dprop: reaches B
    trace of last bit of package 2
        // no queueing inbetween: Rc >= Rs
        2L/Rs: leaves A
        +dprop: reaches switch
        +L/Rc:  leaves switch
        +dprop: reaches B
    inter-arrival time is L/Rs
b.  possible:
        last bit of the first packet leaves the switch at L/Rs + dprop + L/Rc
        last bit of the second packet reaches the switch at 2L/Rs + dprop
        L/Rc > L/Rs
    T >= L/Rc - L/Rs

1.24
40 * 8 * 1024^2 / 100 / 3600 / 24 = 38.8361days
FedEx overnight is much better

1.25
a.  dprop = 20000 / 2.5e8 = 0.08s
    R * dprop = 2Mb/s * 0.08s = 0.16Mb
b.  min(800_000b, 0.16Mb) = 0.16Mb
c.  the maximum number of bits in the link
d.  20000 / 0.16 / 1024^2 = 119.209m, slightly longer than a football field
e.  Rdprop / m = Rm/s / m = R/s

1.26
R = s

1.27
a.  1Gb/s * 0.08s = 0.08Gb
b.  min(800_000b, 0.08Gb) = 800_000b
c.  1Gb/s / 2.5e8m/s = 4.295m

1.28
a.  d = L/R + dprop = 800_000 / 2 * 1024^2 + 0.08s = 0.381s + 0.08s = 0.461s
b.  one package:
        L/R:    last bit sent
        +dprop: last bit received, acknowledge sent
        +dprop: acknowledge received 
    20(2 * dprop + L/R) = 3.2s + 0.381s = 3.581s
c.  a is quicker but less reliable, the whole message has to be resended on failure

1.29
a.  36000km / 2.4e8m/s = 0.15s
b.  10Mb/s * 0.15s = 1.5Mb
c.  x / 10Mb/s >= 60s
    x >= 600Mb

1.30
these stickers they attach to your baggage (what's the name of it?)
seats and seat numbers of passengers

1.31
a.  8e6 / 2Mbps = 3.815s each link
    11.444s in total
b.  1e4 / 2Mbps = 0.005s
    2nd packet received at 0.010s
c.  last packet sent from source at 0.005 * 800 = 4s
    last packet received by the destination at 4s + 2 * 0.005 = 4.010s
    almost three times better than no segmentation
d.  failure recovery: destination can require the source to only resend failed segments instead of the whole file
e.  more work for both switches and hosts
    may be complications if the segments are received out-of-order

1.32
propagation delays hit harder with message switching

1.33
N = F/S
last packet is received by the first switch at NL/R, +2L/R it reaches the destination
d(F(80 + S)/SR + 2(80 + S)/R)/dL
= d(80F/SR + F/R + 160/R + 2S/R)/dL
= -80F/RS^2 + 2/R = 0
-40F + S^2 = 0
S = (40F)^(1/2)

1.34
they are both a ISP and a telephone service provider
they somehow can transmit packets between the two networks

2.1
a.  false, the client will send four requests
b.  true, with persistent connections
c.  false, each request is sent as a single TCP segment with nonpersistent connections
d.  false, Date: is the time the object is fetched from the server, the text is describing Last-Modified:
e.  false, GET is sent with empty message body

2.2
USER <SP> <username> <CRLF>
PASS <SP> <password> <CRLF>
ACCT <SP> <account-information> <CRLF>
CWD  <SP> <pathname> <CRLF>
CDUP <CRLF>
SMNT <SP> <pathname> <CRLF>
QUIT <CRLF>
REIN <CRLF>
PORT <SP> <host-port> <CRLF>
PASV <CRLF>
TYPE <SP> <type-code> <CRLF>
STRU <SP> <structure-code> <CRLF>
MODE <SP> <mode-code> <CRLF>
RETR <SP> <pathname> <CRLF>
STOR <SP> <pathname> <CRLF>
STOU <CRLF>
APPE <SP> <pathname> <CRLF>
ALLO <SP> <decimal-integer>
    [<SP> R <SP> <decimal-integer>] <CRLF>
REST <SP> <marker> <CRLF>
RNFR <SP> <pathname> <CRLF>
RNTO <SP> <pathname> <CRLF>
ABOR <CRLF>
DELE <SP> <pathname> <CRLF>
RMD  <SP> <pathname> <CRLF>
MKD  <SP> <pathname> <CRLF>
PWD  <CRLF>
LIST [<SP> <pathname>] <CRLF>
NLST [<SP> <pathname>] <CRLF>
SITE <SP> <string> <CRLF>
SYST <CRLF>
STAT [<SP> <pathname>] <CRLF>
HELP [<SP> <string>] <CRLF>
NOOP <CRLF>
functionality of these commands are specified in section 4.1 of RFC 959

2.3
DNS: resolve host to IP
UDP: for DNS
TCP: for HTTP

2.4
a.  gaia.cs.umass.edu/cs453/index.html
    from Host: and path after GET method
b.  1.1, from HTTP/1.1
c.  persistent, from Connection: keep-alive
d.  unknown, not part of HTTP protocol
e.  Netscape Navigator 7.2, from User-Agent: header
    different browser supports different subset of HTML, CSS and javascript
    it's mainly resolved by client-side shim scripts and css vendor prefixes now
    back in the days server sent differnt version of pages to client with different browsers

2.5
a.  yes, status code is 200
    reply provided at Tue, 07 Mar 2018 12:39:45 GMT
b.  Sat, 10 Dec2005 18:27:46 GMT, from Last-Modified: header
c.  3874, from Content-Length: header
d.  <!doc, the first five bytes following two <cr><lf>
    yes, from Connection: Keep-Alive header

2.6
a.  by header Connection: close, from section 8.1.2,
        " Persistent connections provide a mechanism by which a client and a
        server can signal the close of a TCP connection. This signaling takes
        place using the Connection header field (section 14.10). Once a close
        has been signaled, the client MUST NOT send any more requests on that
        connection."
    both client and server can signal the close of a connection
b.  appearently none
c.  no. from section 8.1.4, 
        "A single-user client SHOULD NOT maintain more than 2 connections with any server or proxy."
d.  it's possible, from section 8.1.4:
        " A client, server, or proxy MAY close the transport connection at any
        time. For example, a client might have started to send a new request
        at the same time that the server has decided to close the "idle"
        connection. From the server's point of view, the connection is being
        closed while it was idle, but from the client's point of view, a
        request is in progress."

2.7
2RTT0 + Σ(i>0)RTTi
TCP 3-way handshake + transmittion + RTTs for DNS

2.8
a.  8 * 2RTT0 = 16RTT0, 2RTT0 for each object
b.  [8/5] * 2RTT0 = 4RTT0
c.  assume all objects are requested in turn, tcp connection already established for the HTML file
    8RTT0, one for each object

2.9
a.  Δ = 0.0540
    β = 16
    d   = Δ / (1 - Δβ)
        = 0.0540 / (1 - 0.0540 * 16)
        = 0.3971
    dtotal = d + 2 = 2.3971
b.  0.6 * 850000 / 100Mbps +
    0.4 * dtotal
    = 0.9637

2.10
propagation delay can be ignored
parallel and persistent connection can at most skip all the 3 * 11 = 33 control packets
which is a gain of 33 * 200 / 150 = 44 secs
the objects has to be sent through the link with no less than 11 * 100K / 150 = 7509.333 secs
no significant gain from parallel nor persistent connections

2.11
a.  yes: assume Bob uses N parallel connections, each connection get 1/(N + 4) of the total throughput
    Bob gets N / (N + 4) of the total throughput instead of 1 / (N + 4) of other users
b.  no as reasoned above: every user gets 1/5 of the total throughput

2.12
./network/application/printout
most sites today are HTTPS only, to which connection starts with HTTP CONNECT method:
    CONNECT www.icann.org:443 HTTP/1.1
    Host: www.icann.org:443
    Proxy-Connection: keep-alive
    User-Agent: // omitted
all GET requests to non-HTTPS sites do not have If-Modified-Since: header
some explicitly have header disabling caches:
    GET http://milk.com/ HTTP/1.1
    Host: milk.com
    Proxy-Connection: keep-alive
    Pragma: no-cache
    Cache-Control: no-cache
    Upgrade-Insecure-Requests: 1
maybe for security reasons

2.13
FROM: in SMTP is required, only left null on notification of errors
From: in mail data is optional
only the From: in mail data is shown to the users as they and their mail server are not communicating on SMTP

2.14
SMTP mark the end with a period on a single line
HTTP uses Content-Length: header to indicate the length of the message body
HTTP cannot use the same method as SMTP, period on its own line is valid HTTP message content

2.15
Mail Transfer Agents
"Jonny" <tennis5@pp33head.com>, others on the chain are MTAs

2.16
it's meant to provide unique ids of mails consistent across sessions:
    "The unique-id of a message is an arbitrary server-determined
    string, consisting of one to 70 characters in the range 0x21
    to 0x7E, which uniquely identifies a message within a
    maildrop and which persists across sessions.  This
    persistence is required even if a session ends without
    entering the UPDATE state.  The server should never reuse an
    unique-id in a given maildrop, for as long as the entity
    using the unique-id exists."

2.17
a.  C: delete 1
    C: quit
    S: +OK POP3 server signing off
b.  C: quit
    S: +OK POP3 server signing off
c.  C: list
    S: 1 <random number>
    S: 2 <random number>
    // user saw no new mails
    C: quit
    S: +OK POP3 server signing off

2.18
a.  quoting from wikipedia:
        "WHOIS (pronounced as the phrase "who is") is a query and response protocol that is widely used for querying
        databases that store the registered users or assignees of an Internet resource, such as a domain name, an IP
        address block or an autonomous system, but is also used for a wider range of other information."
b.  1.1.1.1
    APNIC and Cloudflare DNS Resolver project
    9.9.9.9
    Global Public Recursive DNS Resolver Service
c.  > set type=NS
    > ietf.org
    Server:         8.8.8.8
    Address:        8.8.8.8#53

    Non-authoritative answer:
    ietf.org        nameserver = ns1.hkg1.afilias-nst.info.
    ietf.org        nameserver = ns1.yyz1.afilias-nst.info.
    ietf.org        nameserver = ns1.mia1.afilias-nst.info.
    ietf.org        nameserver = ns1.ams1.afilias-nst.info.
    ietf.org        nameserver = ns0.amsl.com.
    ietf.org        nameserver = ns1.sea1.afilias-nst.info.

    Authoritative answers can be found from:
    > set type=A
    > ietf.org
    Server:         8.8.8.8
    Address:        8.8.8.8#53

    Non-authoritative answer:
    Name:   ietf.org
    Address: 4.31.198.44
    > set type=MX
    > ietf.org
    Server:         8.8.8.8
    Address:        8.8.8.8#53

    Non-authoritative answer:
    ietf.org        mail exchanger = 0 mail.ietf.org.

    Authoritative answers can be found from:
    and exactly the same results fromr 1.1.1.1
d.  > bing.com
    Server:         1.1.1.1
    Address:        1.1.1.1#53

    Non-authoritative answer:
    Name:   bing.com
    Address: 13.107.21.200
    Name:   bing.com
    Address: 204.79.197.200
    Yes, it has three
e.  It's not an US entity so not registered on ARIN I guess
f.  they can get physical location of the institution with whois database
    they can do all tropes from spy movies instead of hacking the server remotely behind a computer
    nslookup resolves domain to IP, and IP (especially IPv6) indicates physical address
g.  mostly because of oversight: https://whois.icann.org/en/whats-horizon

2.19
a.  // skipped
b.  // will show one entry from each query, there can be 20+ of them in a single query
    $ dig @a.root-servers.net google.com
    com.                    172800  IN      NS      e.gtld-servers.net.
    google.com.             172800  IN      NS      ns2.google.com.
    google.com.             300     IN      A       172.217.160.11
    $ dig @a.root-servers.net ietf.org
    org.                    172800  IN      NS      d0.org.afilias-nst.org.
    ietf.org.               86400   IN      NS      ns1.mia1.afilias-nst.info.
    ietf.org.               300     IN      A       4.31.198.44

2.20
It depends on the strategy of the cache
a well-designed cache usually keeps most used data in it more frequently to reduce miss rate of the most accessed site
sample the cache at different time and the most frequently seen server in the cache probably is the most accessed site 

2.21
by measuring RTT of nslookup from local dns
if a site is accessed recently, its IP should be in cache of the local DNS
nslookup would take no more than a few milliseconds

2.22
./network/application/problems
N = 10, u = 307200 bps, dcs = 7680.000 secs, dp2p = 7680.000 secs
N = 10, u = 716800 bps, dcs = 7680.000 secs, dp2p = 7680.000 secs
N = 10, u = 2097152 bps, dcs = 7680.000 secs, dp2p = 7680.000 secs
N = 100, u = 307200 bps, dcs = 51200.000 secs, dp2p = 25903.557 secs
N = 100, u = 716800 bps, dcs = 51200.000 secs, dp2p = 15616.203 secs
N = 100, u = 2097152 bps, dcs = 51200.000 secs, dp2p = 7680.000 secs
N = 1000, u = 307200 bps, dcs = 512000.000 secs, dp2p = 47558.781 secs
N = 1000, u = 716800 bps, dcs = 512000.000 secs, dp2p = 21524.852 secs
N = 1000, u = 2097152 bps, dcs = 512000.000 secs, dp2p = 7680.000 secs

2.23
a.  transmit to each client with rate us/N
    it's possible as us/N <= dmin <= di for all i, us/N * N = us <= us
    each client will receive the file in time F / (us/N) = NF / us 
b.  transmit to each client with rate dmin
    it's possible as dmin <= di for all i, Ndmin <= us
    each client will receive the file in time F / dmin
c.  immediately follows part a and b

2.24
// thanks Kumar 2006: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.63.5807&rep=rep1&type=pdf
a.  let si be the transmit rate from server to peer i
    let ul = Σ(i > 0)ui, us <= (ul + us)/N, Nus <= ul + us, ul/(N - 1) >= us
    si = (1 - δ)ui / (N - 1)
    δ = (ul / (N - 1) - us) / (ul / (N - 1))
    0 <= δ <= 1, (N-1)si <= ui, peer i can redistribute the bits it's receiving to all other peers
    Σsi = Σ(i>0)(1 - δ)ui / (N - 1)
        = (1 - δ) / (N - 1) * Σ(i>0)ui
        = (1 - δ) / (N - 1) * ul
        = us
    the rates can be supported by the server
    the file can be distributed in time F/us
b.  let si = ui / (N - 1) + δ for i >= 1
    δ = (us - ul/(N - 1)) / N >= 0
    Σsi = Σ(i>0)ui/(N - 1) + Nδ
        = ul/(N-1) + us - ul(N-1)
        = us
    each peer redistributes ui/(N-1) fresh bits it's receiving from server to other peers
    peer i receives
        ui/(N-1) + δ + Σ(k != i)uk/(N - 1)
        = Σ(i>0)ui/(N-1) + δ
        = ul/(N-1) + (us - ul/(N-1)) / N
        = (us + ul)/N
    and the file can be distributed in time F / ((us + ul)/N) = NF / (us + ul)
c.  immediately follows part a and b

2.25
N nodes and N(N-1)/2 edges
overlay networks is abstracted over routers and such

2.26
a.  possible, if a peer for which Bob is a neighbor, either 
        1.  there's no more than 3 peers supplying data to the peer
        2.  Bob is optimistically unchoked
    Bob will receive data from the peer even if he doesn't upload
b.  the same as part a, but also share data among these computers and these computers only, with a customized client
    some bittorrent clients have this functionality built in

2.27
peer 3 asks its first second successor (peer 4) for its successor (peer 8)
peer 3 replaces its second successor (peer 5) with the answer 

2.28
15 asks 1
1 asks 3
3 asks 4
4 asks 5
5 realizes it's the predecessor of 6, inform 8 and pass the info back to 6

2.29
if all the known peers are stored in a trie, closest peer can be find in a single O(n) traverse of the trie
difference at nth most significant position suppresses all n-1 less significant bits

2.30
possible, two geographically distant peers may be assigned neighboring identifiers
if the DHT passes messages from neighbor to neighbor, the RTT would be huge 

2.31
a.  before taking any input:
    Error: Os { code: 10061, kind: ConnectionRefused, message: "No connection could be made because the target machine actively refused it." }
    error: process didn't exit successfully: `target\debug\tcp_client.exe 4444 5555` (exit code: 1)
    there's no server to accept the TCP handshakes
b.  aaaa // input
    Error: Os { code: 10054, kind: ConnectionReset, message: "An existing connection was forcibly closed by the remote host." }
    error: process didn't exit successfully: `target\debug\udp_client.exe 4444 5555` (exit code: 1)
    UDP socket only found there's no server on trying to send the packet
c.  the same errors

2.32
not necessary, client port is attached to the datagram
before UDPClient has any port number system allocated for it, later it has port number 5432

2.33
for Chrome it's fixed at 6
it reduces the time wasted on RTTs, but may exhaust the socket resource on the server

2.34
the bytes are received in exact the order been sent, no need to reorder them
additional paddings (including length / format info) would be necessary if the message has variable length

2.35
"free and open-source cross-platform web server software"
it's open-source hence free of charge
provides standard HTTP server features (it is the standard btw)

2.36
key: the SHA-1 hash of a torrent
value: address of peers

Socket Assignment 1
./network/application/web-server

Socket Assignment 2
./network/application/udp-ping
packet structure resembles ICMP echo request/reply

Socket Assignment 3
./network/application/mail
successfully sent to local MailSlurper server and ProtonMail
failed on Gmail due to reputation issue

Socket Assignment 4
./network/application/web-proxy
again most access to HTTPS sites starts with CONNECT method, which this program does not handle